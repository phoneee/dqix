[build-system]
requires = ["setuptools>=69.0", "wheel", "setuptools-scm[toml]>=8.0"]
build-backend = "setuptools.build_meta"

[project]
name = "dqix"
version = "2.0.0"
description = "Domain Quality Index - Modern Internet Observability Platform with Multi-language Architecture"
authors = [
    {name = "DQIX Team", email = "team@dqix.org"},
]
maintainers = [
    {name = "DQIX Team", email = "team@dqix.org"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["domain", "security", "quality", "assessment", "monitoring", "compliance", "internet-observability", "multi-language"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Site Management",
    "Topic :: Security",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Networking :: Monitoring",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
]

# Core dependencies - Modern minimal stack
dependencies = [
    "typer[all]>=0.12.0",
    "rich>=13.7.0",
    "dnspython>=2.6.0",
    "httpx>=0.27.0",
    "cryptography>=42.0.0",
    "pyyaml>=6.0.1",
    "asyncio-throttle>=1.0.2",
    "aiofiles>=23.2.0",
    "python-dateutil>=2.9.0",
]

# Optional dependencies for enhanced features - Modular approach
[project.optional-dependencies]
# Interactive web dashboard only
dashboard = [
    "fastapi>=0.111.0",
    "uvicorn[standard]>=0.30.0",
    "jinja2>=3.1.0",
]

# Real-time features for dashboard
realtime = [
    "websockets>=12.0",
    "sse-starlette>=2.1.0",
]

# Modern web stack (dashboard + realtime)
web = [
    "dqix[dashboard,realtime]"
]

# Professional export capabilities  
export = [
    "weasyprint>=62.0",
    "reportlab>=4.2.0",
    "jinja2>=3.1.0",
    "markdown>=3.6.0",
]

# Data visualization for reports
charts = [
    "plotly>=5.20.0",
    "matplotlib>=3.8.0",
    "pillow>=10.3.0",
    "kaleido>=0.2.1",
]

# Data analysis capabilities
analysis = [
    "pandas>=2.2.0",
    "numpy>=1.26.0",
]

# Enhanced visualization (charts + analysis)
visualization = [
    "dqix[charts,analysis]"
]

# Performance monitoring and benchmarking
performance = [
    "psutil>=5.9.0",
    "memory-profiler>=0.61.0",
]

# Development tools
dev = [
    "pytest>=8.2.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-asyncio>=0.23.0",
    "black>=24.4.0",
    "ruff>=0.4.0",
    "mypy>=1.10.0",
    "pre-commit>=3.7.0",
]

# Professional reporting stack
reports = [
    "dqix[export,charts]"
]

# Complete web platform
platform = [
    "dqix[web,export,visualization,performance]"
]

# Everything (for development and full features)
all = [
    "dqix[platform,dev]"
]

[project.urls]
Homepage = "https://github.com/phoneee/dqix"
Documentation = "https://dqix.readthedocs.io/"
Repository = "https://github.com/phoneee/dqix"
"Bug Tracker" = "https://github.com/phoneee/dqix/issues"
Changelog = "https://github.com/phoneee/dqix/blob/main/CHANGELOG.md"

[project.scripts]
dqix = "dqix.interfaces.cli:main"

[tool.setuptools]
package-dir = {"dqix" = "dqix-python"}

[tool.setuptools.packages.find]
where = ["."]
include = ["dqix-python*"]
namespaces = false

[tool.setuptools.package-data]
dqix = ["py.typed", "templates/*.html", "static/**/*"]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "web: marks tests as web-related tests",
]

[tool.coverage.run]
source = ["dqix"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 